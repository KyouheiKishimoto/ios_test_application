// ignore_for_file: non_constant_identifier_names
// ignore_for_file: camel_case_types
// ignore_for_file: prefer_single_quotes

// This file is automatically generated. DO NOT EDIT, all your changes would be lost.
import 'package:flutter/material.dart' show debugPrint;
import 'package:ios_test_application/models/model/weather_entity.dart';
import 'package:ios_test_application/models/model/wether_smaple_entity.dart';

JsonConvert jsonConvert = JsonConvert();
typedef JsonConvertFunction<T> = T Function(Map<String, dynamic> json);

class JsonConvert {
	static final Map<String, JsonConvertFunction> _convertFuncMap = {
		(WeatherEntity).toString(): WeatherEntity.fromJson,
		(WeatherDescription).toString(): WeatherDescription.fromJson,
		(WeatherForecasts).toString(): WeatherForecasts.fromJson,
		(WeatherForecastsDetail).toString(): WeatherForecastsDetail.fromJson,
		(WeatherForecastsTemperature).toString(): WeatherForecastsTemperature.fromJson,
		(WeatherForecastsTemperatureMin).toString(): WeatherForecastsTemperatureMin.fromJson,
		(WeatherForecastsTemperatureMax).toString(): WeatherForecastsTemperatureMax.fromJson,
		(WeatherForecastsChanceOfRain).toString(): WeatherForecastsChanceOfRain.fromJson,
		(WeatherForecastsImage).toString(): WeatherForecastsImage.fromJson,
		(WeatherLocation).toString(): WeatherLocation.fromJson,
		(WeatherCopyright).toString(): WeatherCopyright.fromJson,
		(WeatherCopyrightImage).toString(): WeatherCopyrightImage.fromJson,
		(WeatherCopyrightProvider).toString(): WeatherCopyrightProvider.fromJson,
		(WetherSmapleEntity).toString(): WetherSmapleEntity.fromJson,
		(WetherSmapleDescription).toString(): WetherSmapleDescription.fromJson,
		(WetherSmapleForecasts).toString(): WetherSmapleForecasts.fromJson,
		(WetherSmapleForecastsDetail).toString(): WetherSmapleForecastsDetail.fromJson,
		(WetherSmapleForecastsTemperature).toString(): WetherSmapleForecastsTemperature.fromJson,
		(WetherSmapleForecastsTemperatureMin).toString(): WetherSmapleForecastsTemperatureMin.fromJson,
		(WetherSmapleForecastsTemperatureMax).toString(): WetherSmapleForecastsTemperatureMax.fromJson,
		(WetherSmapleForecastsChanceOfRain).toString(): WetherSmapleForecastsChanceOfRain.fromJson,
		(WetherSmapleForecastsImage).toString(): WetherSmapleForecastsImage.fromJson,
		(WetherSmapleLocation).toString(): WetherSmapleLocation.fromJson,
		(WetherSmapleCopyright).toString(): WetherSmapleCopyright.fromJson,
		(WetherSmapleCopyrightImage).toString(): WetherSmapleCopyrightImage.fromJson,
		(WetherSmapleCopyrightProvider).toString(): WetherSmapleCopyrightProvider.fromJson,
	};

  T? convert<T>(dynamic value) {
    if (value == null) {
      return null;
    }
    return asT<T>(value);
  }

  List<T?>? convertList<T>(List<dynamic>? value) {
    if (value == null) {
      return null;
    }
    try {
      return value.map((dynamic e) => asT<T>(e)).toList();
    } catch (e, stackTrace) {
      debugPrint('asT<$T> $e $stackTrace');
      return <T>[];
    }
  }

  List<T>? convertListNotNull<T>(dynamic value) {
    if (value == null) {
      return null;
    }
    try {
      return (value as List<dynamic>).map((dynamic e) => asT<T>(e)!).toList();
    } catch (e, stackTrace) {
      debugPrint('asT<$T> $e $stackTrace');
      return <T>[];
    }
  }

  T? asT<T extends Object?>(dynamic value) {
    if (value is T) {
      return value;
    }
    final String type = T.toString();
    try {
      final String valueS = value.toString();
      if (type == "String") {
        return valueS as T;
      } else if (type == "int") {
        final int? intValue = int.tryParse(valueS);
        if (intValue == null) {
          return double.tryParse(valueS)?.toInt() as T?;
        } else {
          return intValue as T;
        }
      } else if (type == "double") {
        return double.parse(valueS) as T;
      } else if (type == "DateTime") {
        return DateTime.parse(valueS) as T;
      } else if (type == "bool") {
        if (valueS == '0' || valueS == '1') {
          return (valueS == '1') as T;
        }
        return (valueS == 'true') as T;
      } else if (type == "Map" || type.startsWith("Map<")) {
        return value as T;
      } else {
        if (_convertFuncMap.containsKey(type)) {
          return _convertFuncMap[type]!(value) as T;
        } else {
          throw UnimplementedError('$type unimplemented');
        }
      }
    } catch (e, stackTrace) {
      debugPrint('asT<$T> $e $stackTrace');
      return null;
    }
  }

	//list is returned by type
	static M? _getListChildType<M>(List<Map<String, dynamic>> data) {
		if(<WeatherEntity>[] is M){
			return data.map<WeatherEntity>((Map<String, dynamic> e) => WeatherEntity.fromJson(e)).toList() as M;
		}
		if(<WeatherDescription>[] is M){
			return data.map<WeatherDescription>((Map<String, dynamic> e) => WeatherDescription.fromJson(e)).toList() as M;
		}
		if(<WeatherForecasts>[] is M){
			return data.map<WeatherForecasts>((Map<String, dynamic> e) => WeatherForecasts.fromJson(e)).toList() as M;
		}
		if(<WeatherForecastsDetail>[] is M){
			return data.map<WeatherForecastsDetail>((Map<String, dynamic> e) => WeatherForecastsDetail.fromJson(e)).toList() as M;
		}
		if(<WeatherForecastsTemperature>[] is M){
			return data.map<WeatherForecastsTemperature>((Map<String, dynamic> e) => WeatherForecastsTemperature.fromJson(e)).toList() as M;
		}
		if(<WeatherForecastsTemperatureMin>[] is M){
			return data.map<WeatherForecastsTemperatureMin>((Map<String, dynamic> e) => WeatherForecastsTemperatureMin.fromJson(e)).toList() as M;
		}
		if(<WeatherForecastsTemperatureMax>[] is M){
			return data.map<WeatherForecastsTemperatureMax>((Map<String, dynamic> e) => WeatherForecastsTemperatureMax.fromJson(e)).toList() as M;
		}
		if(<WeatherForecastsChanceOfRain>[] is M){
			return data.map<WeatherForecastsChanceOfRain>((Map<String, dynamic> e) => WeatherForecastsChanceOfRain.fromJson(e)).toList() as M;
		}
		if(<WeatherForecastsImage>[] is M){
			return data.map<WeatherForecastsImage>((Map<String, dynamic> e) => WeatherForecastsImage.fromJson(e)).toList() as M;
		}
		if(<WeatherLocation>[] is M){
			return data.map<WeatherLocation>((Map<String, dynamic> e) => WeatherLocation.fromJson(e)).toList() as M;
		}
		if(<WeatherCopyright>[] is M){
			return data.map<WeatherCopyright>((Map<String, dynamic> e) => WeatherCopyright.fromJson(e)).toList() as M;
		}
		if(<WeatherCopyrightImage>[] is M){
			return data.map<WeatherCopyrightImage>((Map<String, dynamic> e) => WeatherCopyrightImage.fromJson(e)).toList() as M;
		}
		if(<WeatherCopyrightProvider>[] is M){
			return data.map<WeatherCopyrightProvider>((Map<String, dynamic> e) => WeatherCopyrightProvider.fromJson(e)).toList() as M;
		}
		if(<WetherSmapleEntity>[] is M){
			return data.map<WetherSmapleEntity>((Map<String, dynamic> e) => WetherSmapleEntity.fromJson(e)).toList() as M;
		}
		if(<WetherSmapleDescription>[] is M){
			return data.map<WetherSmapleDescription>((Map<String, dynamic> e) => WetherSmapleDescription.fromJson(e)).toList() as M;
		}
		if(<WetherSmapleForecasts>[] is M){
			return data.map<WetherSmapleForecasts>((Map<String, dynamic> e) => WetherSmapleForecasts.fromJson(e)).toList() as M;
		}
		if(<WetherSmapleForecastsDetail>[] is M){
			return data.map<WetherSmapleForecastsDetail>((Map<String, dynamic> e) => WetherSmapleForecastsDetail.fromJson(e)).toList() as M;
		}
		if(<WetherSmapleForecastsTemperature>[] is M){
			return data.map<WetherSmapleForecastsTemperature>((Map<String, dynamic> e) => WetherSmapleForecastsTemperature.fromJson(e)).toList() as M;
		}
		if(<WetherSmapleForecastsTemperatureMin>[] is M){
			return data.map<WetherSmapleForecastsTemperatureMin>((Map<String, dynamic> e) => WetherSmapleForecastsTemperatureMin.fromJson(e)).toList() as M;
		}
		if(<WetherSmapleForecastsTemperatureMax>[] is M){
			return data.map<WetherSmapleForecastsTemperatureMax>((Map<String, dynamic> e) => WetherSmapleForecastsTemperatureMax.fromJson(e)).toList() as M;
		}
		if(<WetherSmapleForecastsChanceOfRain>[] is M){
			return data.map<WetherSmapleForecastsChanceOfRain>((Map<String, dynamic> e) => WetherSmapleForecastsChanceOfRain.fromJson(e)).toList() as M;
		}
		if(<WetherSmapleForecastsImage>[] is M){
			return data.map<WetherSmapleForecastsImage>((Map<String, dynamic> e) => WetherSmapleForecastsImage.fromJson(e)).toList() as M;
		}
		if(<WetherSmapleLocation>[] is M){
			return data.map<WetherSmapleLocation>((Map<String, dynamic> e) => WetherSmapleLocation.fromJson(e)).toList() as M;
		}
		if(<WetherSmapleCopyright>[] is M){
			return data.map<WetherSmapleCopyright>((Map<String, dynamic> e) => WetherSmapleCopyright.fromJson(e)).toList() as M;
		}
		if(<WetherSmapleCopyrightImage>[] is M){
			return data.map<WetherSmapleCopyrightImage>((Map<String, dynamic> e) => WetherSmapleCopyrightImage.fromJson(e)).toList() as M;
		}
		if(<WetherSmapleCopyrightProvider>[] is M){
			return data.map<WetherSmapleCopyrightProvider>((Map<String, dynamic> e) => WetherSmapleCopyrightProvider.fromJson(e)).toList() as M;
		}

		debugPrint("${M.toString()} not found");
	
		return null;
}

	static M? fromJsonAsT<M>(dynamic json) {
		if (json is List) {
			return _getListChildType<M>(json.map((e) => e as Map<String, dynamic>).toList());
		} else {
			return jsonConvert.asT<M>(json);
		}
	}
}